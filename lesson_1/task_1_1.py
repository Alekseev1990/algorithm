
"""
Задание 1.
Для каждой из трех функций выполнить следующее:
1) для каждого выражения вместо !!! укажите сложность.
2) определите сложность алгоритма в целом (Сложность: !!!).
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
-- Сложность нужно указать только там, где есть !!!
-- Сложности встроенных функций нужно искать
    в таблицах (материалы к уроку).
"""

import random


##############################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.
    Алгоритм 1:
    Создать множество из списка
    Сложность: О(N) + О(N) = 2*О(N) = О(N).
    """
    lst_to_set = set(lst_obj)  # O(N)

    return lst_to_set  #
    # O(N) функция случайным образом выбирает из чисел от -100000 до 100000 j количество чисел,
    # то есть функции надо определить диапозон и, не повторяясь, выдать результат N чисел (простой поиск)

##############################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 2:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах
    Сложность: O(N)*O(N)+0(1)+0(1) - выбираю худший вариант O(N)*O(N) = O(N^2) квадратичная функция.
    """
    # речь о количестве операции. То есть помимо н шагов в цикле фор еще н шагов в иф
    for j in range(len(lst_obj)):          # O(N) линейная, будет выполняться N раз
        if lst_obj[j] in lst_obj[j+1:]:  # с увеличением входящих данных количество операции так же увеличится в if
            # O(N) линейная, перебирает числа в диапозоне послеовательно прибавляя 1 на шаге
            return False                   # константа 0(1) возвращает только false
    return True                            # константа 0(1) возвращает только true


##############################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 3:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.
    Сложность: O(N log N) линейно-логарифмический, наихудший вариант
    """
    lst_copy = list(lst_obj)                 # O(N) создание списка с N чисел
    lst_copy.sort()                          # O(N log N) алгоритм для быстрой сортировки линейно-логарифмический
    for i in range(len(lst_obj) - 1):        # O(N) будет выполняться N - 1 раз
        if lst_copy[i] == lst_copy[i+1]:     # O(1) всегда будет сравниваться 1 число с другим, последовательно
            return False                     # O(1) возвращает только false
    return True                              # O(1) возвращает только true


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))

